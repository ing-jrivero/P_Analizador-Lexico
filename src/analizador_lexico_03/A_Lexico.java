// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: A_Lexico.jflex

package analizador_lexico_03;
import static analizador_lexico_03.Tokens.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class A_Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\7\0"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\0\1\13"+
    "\12\14\1\0\1\15\1\0\1\16\3\0\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\2\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\30\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\30\1\44\1\30\4\0"+
    "\1\45\1\0\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\2\30\1\57\1\60\1\61\1\62"+
    "\1\63\1\30\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\30\1\72\1\30\12\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\25\12\1\0\1\2\24\12\1\0"+
    "\10\12\1\13\16\12\1\7\1\12\1\14\3\12\1\15"+
    "\26\12\1\16\10\12\1\17\1\0\1\20\1\21\1\0"+
    "\1\22\1\23\1\24\14\0\1\25\2\0\1\26\62\0"+
    "\1\27\177\0\1\30\63\0\1\31\117\0\1\32\42\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\73\0\73\0\73\0\354"+
    "\0\u0127\0\73\0\73\0\u0162\0\u019d\0\u01d8\0\u0213\0\u024e"+
    "\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426"+
    "\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe"+
    "\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6"+
    "\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae"+
    "\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86"+
    "\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0162"+
    "\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb"+
    "\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\73\0\u1098"+
    "\0\u0162\0\u10d3\0\u110e\0\u1149\0\u0162\0\u1184\0\u11bf\0\u11fa"+
    "\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2"+
    "\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa"+
    "\0\u15e5\0\u1620\0\u165b\0\u0162\0\u1696\0\u16d1\0\u170c\0\u1747"+
    "\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u0162\0\u18e4"+
    "\0\u191f\0\u195a\0\u1995\0\u0162\0\u19d0\0\u1a0b\0\u1a46\0\u1a81"+
    "\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59"+
    "\0\73\0\u1c94\0\u1ccf\0\73\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb"+
    "\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93"+
    "\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b"+
    "\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343"+
    "\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b"+
    "\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3"+
    "\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855\0\73\0\u2890"+
    "\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u2a68"+
    "\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40"+
    "\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\u2e18"+
    "\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0"+
    "\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8"+
    "\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0"+
    "\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578"+
    "\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750"+
    "\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2\0\u38ed\0\u3928"+
    "\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00"+
    "\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8"+
    "\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0"+
    "\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\u4088"+
    "\0\u40c3\0\u40fe\0\u4139\0\u4174\0\u41af\0\u41ea\0\u4225\0\u4260"+
    "\0\u429b\0\u42d6\0\u4311\0\u434c\0\u4387\0\u43c2\0\u43fd\0\u4438"+
    "\0\u4473\0\u44ae\0\u44e9\0\u4524\0\u455f\0\u459a\0\73\0\u45d5"+
    "\0\u4610\0\u464b\0\u4686\0\u46c1\0\u46fc\0\u4737\0\u4772\0\u47ad"+
    "\0\u47e8\0\u4823\0\u485e\0\u4899\0\u48d4\0\u490f\0\u494a\0\u4985"+
    "\0\u49c0\0\u49fb\0\u4a36\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d"+
    "\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84\0\u4cbf\0\u4cfa\0\u4d35"+
    "\0\u4d70\0\u4dab\0\u4de6\0\u4e21\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d"+
    "\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9\0\u5034\0\u506f\0\u50aa\0\u50e5"+
    "\0\u5120\0\u515b\0\73\0\u5196\0\u51d1\0\u520c\0\u5247\0\u5282"+
    "\0\u52bd\0\u52f8\0\u5333\0\u536e\0\u53a9\0\u53e4\0\u541f\0\u545a"+
    "\0\u5495\0\u54d0\0\u550b\0\u5546\0\u5581\0\u55bc\0\u55f7\0\u5632"+
    "\0\u566d\0\u56a8\0\u56e3\0\u571e\0\u5759\0\u5794\0\u57cf\0\u580a"+
    "\0\u5845\0\u5880\0\u58bb\0\u58f6\0\u5931\0\u596c\0\u59a7\0\u59e2"+
    "\0\u5a1d\0\u5a58\0\u5a93\0\u5ace\0\u5b09\0\u5b44\0\u5b7f\0\u5bba"+
    "\0\u5bf5\0\u5c30\0\u5c6b\0\u5ca6\0\u5ce1\0\u5d1c\0\u5d57\0\u5d92"+
    "\0\u5dcd\0\u5e08\0\u5e43\0\u5e7e\0\u5eb9\0\u5ef4\0\u5f2f\0\u5f6a"+
    "\0\u5fa5\0\u5fe0\0\u601b\0\u6056\0\u6091\0\u60cc\0\u6107\0\u6142"+
    "\0\u617d\0\u61b8\0\u61f3\0\u622e\0\u6269\0\u62a4\0\u62df\0\u631a"+
    "\0\u6355\0\u6390\0\73\0\u63cb\0\u6406\0\u6441\0\u647c\0\u64b7"+
    "\0\u64f2\0\u652d\0\u6568\0\u65a3\0\u65de\0\u6619\0\u6654\0\u668f"+
    "\0\u66ca\0\u6705\0\u6740\0\u677b\0\u67b6\0\u67f1\0\u682c\0\u6867"+
    "\0\u68a2\0\u68dd\0\u6918\0\u6953\0\u698e\0\u69c9\0\u6a04\0\u6a3f"+
    "\0\u6a7a\0\u6ab5\0\u6af0\0\u6b2b\0\u6b66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\2\1\5\1\6"+
    "\1\3\1\7\1\10\1\11\1\12\1\13\3\14\1\15"+
    "\1\14\1\16\1\17\1\20\1\21\4\14\1\22\2\14"+
    "\1\23\1\14\1\24\1\25\1\26\1\14\1\2\3\14"+
    "\1\27\1\14\1\30\1\31\1\32\1\33\3\14\1\34"+
    "\2\14\1\35\1\14\1\36\1\37\1\40\1\14\74\0"+
    "\2\3\1\0\1\3\4\0\1\3\73\0\1\41\73\0"+
    "\1\42\73\0\1\11\72\0\1\14\2\0\54\14\14\0"+
    "\1\14\2\0\4\14\1\43\47\14\14\0\1\14\2\0"+
    "\17\14\1\44\34\14\14\0\1\14\2\0\17\14\1\45"+
    "\34\14\14\0\1\14\2\0\1\46\53\14\14\0\1\14"+
    "\2\0\14\14\1\47\37\14\14\0\1\14\2\0\17\14"+
    "\1\50\34\14\14\0\1\14\2\0\4\14\1\51\47\14"+
    "\14\0\1\14\2\0\16\14\1\52\35\14\14\0\1\14"+
    "\2\0\1\53\53\14\14\0\1\14\2\0\7\14\1\54"+
    "\44\14\14\0\1\14\2\0\33\14\1\55\20\14\14\0"+
    "\1\14\2\0\45\14\1\56\6\14\14\0\1\14\2\0"+
    "\45\14\1\57\6\14\14\0\1\14\2\0\27\14\1\60"+
    "\24\14\14\0\1\14\2\0\42\14\1\61\11\14\14\0"+
    "\1\14\2\0\45\14\1\62\6\14\14\0\1\14\2\0"+
    "\33\14\1\63\20\14\14\0\1\14\2\0\44\14\1\64"+
    "\7\14\14\0\1\14\2\0\27\14\1\65\24\14\14\0"+
    "\1\14\2\0\36\14\1\66\15\14\14\0\1\67\56\0"+
    "\2\42\2\0\67\42\14\0\1\14\2\0\12\14\1\70"+
    "\41\14\14\0\1\14\2\0\15\14\1\71\36\14\14\0"+
    "\1\14\2\0\15\14\1\72\36\14\14\0\1\14\2\0"+
    "\23\14\1\73\30\14\14\0\1\14\2\0\20\14\1\74"+
    "\1\75\32\14\14\0\1\14\2\0\3\14\1\76\50\14"+
    "\14\0\1\14\2\0\12\14\1\77\6\14\1\100\32\14"+
    "\14\0\1\14\2\0\3\14\1\101\50\14\14\0\1\14"+
    "\2\0\12\14\1\102\41\14\14\0\1\14\2\0\4\14"+
    "\1\103\47\14\14\0\1\14\2\0\40\14\1\104\13\14"+
    "\14\0\1\14\2\0\43\14\1\105\10\14\14\0\1\14"+
    "\2\0\43\14\1\106\10\14\14\0\1\14\2\0\51\14"+
    "\1\107\2\14\14\0\1\14\2\0\46\14\1\110\1\111"+
    "\4\14\14\0\1\14\2\0\32\14\1\112\21\14\14\0"+
    "\1\14\2\0\40\14\1\113\6\14\1\100\4\14\14\0"+
    "\1\14\2\0\32\14\1\114\21\14\14\0\1\14\2\0"+
    "\40\14\1\115\13\14\14\0\1\14\2\0\33\14\1\116"+
    "\20\14\6\0\1\117\5\0\1\67\72\0\1\14\2\0"+
    "\4\14\1\120\47\14\14\0\1\14\2\0\13\14\1\121"+
    "\40\14\14\0\1\14\2\0\22\14\1\122\31\14\14\0"+
    "\1\14\2\0\10\14\1\123\43\14\14\0\1\14\2\0"+
    "\4\14\1\124\47\14\14\0\1\14\2\0\15\14\1\125"+
    "\36\14\14\0\1\14\2\0\4\14\1\126\47\14\14\0"+
    "\1\14\2\0\4\14\1\127\47\14\14\0\1\14\2\0"+
    "\1\130\53\14\14\0\1\14\2\0\22\14\1\131\31\14"+
    "\14\0\1\14\2\0\17\14\1\132\34\14\14\0\1\14"+
    "\2\0\33\14\1\133\20\14\14\0\1\14\2\0\41\14"+
    "\1\121\12\14\14\0\1\14\2\0\50\14\1\134\3\14"+
    "\14\0\1\14\2\0\37\14\1\135\14\14\14\0\1\14"+
    "\2\0\33\14\1\136\20\14\14\0\1\14\2\0\43\14"+
    "\1\125\10\14\14\0\1\14\2\0\33\14\1\137\20\14"+
    "\14\0\1\14\2\0\33\14\1\140\20\14\14\0\1\14"+
    "\2\0\27\14\1\141\24\14\14\0\1\14\2\0\50\14"+
    "\1\142\3\14\14\0\1\14\2\0\45\14\1\143\6\14"+
    "\14\0\1\14\2\0\21\14\1\144\32\14\14\0\1\14"+
    "\2\0\16\14\1\145\35\14\14\0\1\14\2\0\14\14"+
    "\1\146\37\14\14\0\1\14\2\0\17\14\1\147\34\14"+
    "\14\0\1\14\2\0\17\14\1\150\34\14\14\0\1\14"+
    "\2\0\2\14\1\151\51\14\14\0\1\14\2\0\21\14"+
    "\1\152\32\14\14\0\1\14\2\0\4\14\1\153\47\14"+
    "\14\0\1\14\2\0\4\14\1\154\47\14\14\0\1\14"+
    "\2\0\47\14\1\155\4\14\14\0\1\14\2\0\44\14"+
    "\1\156\7\14\14\0\1\14\2\0\42\14\1\157\11\14"+
    "\14\0\1\14\2\0\45\14\1\160\6\14\14\0\1\14"+
    "\2\0\45\14\1\161\6\14\14\0\1\14\2\0\31\14"+
    "\1\162\22\14\14\0\1\14\2\0\47\14\1\163\4\14"+
    "\14\0\1\14\2\0\33\14\1\164\20\14\14\0\1\14"+
    "\2\0\33\14\1\154\20\14\14\0\1\14\2\0\4\14"+
    "\1\165\47\14\4\0\1\166\7\0\1\14\2\0\54\14"+
    "\14\0\1\14\2\0\6\14\1\167\45\14\14\0\1\14"+
    "\2\0\21\14\1\170\32\14\4\0\1\171\7\0\1\14"+
    "\2\0\54\14\14\0\1\14\2\0\21\14\1\172\32\14"+
    "\14\0\1\14\2\0\4\14\1\173\47\14\14\0\1\14"+
    "\2\0\20\14\1\174\33\14\14\0\1\14\2\0\33\14"+
    "\1\165\20\14\4\0\1\175\7\0\1\14\2\0\54\14"+
    "\14\0\1\14\2\0\35\14\1\167\16\14\14\0\1\14"+
    "\2\0\47\14\1\170\4\14\4\0\1\176\7\0\1\14"+
    "\2\0\54\14\14\0\1\14\2\0\47\14\1\172\4\14"+
    "\14\0\1\14\2\0\33\14\1\173\20\14\14\0\1\14"+
    "\2\0\46\14\1\174\5\14\4\0\1\177\7\0\1\14"+
    "\2\0\54\14\20\0\1\200\56\0\1\201\7\0\1\14"+
    "\2\0\54\14\20\0\1\202\56\0\1\203\7\0\1\14"+
    "\2\0\54\14\4\0\1\204\7\0\1\14\2\0\54\14"+
    "\47\0\1\205\72\0\1\206\47\0\1\207\26\0\1\210"+
    "\63\0\1\211\55\0\1\212\26\0\1\213\60\0\1\214"+
    "\35\0\1\215\7\0\26\216\1\0\25\216\17\0\26\217"+
    "\1\0\25\217\72\0\1\211\72\0\1\214\36\0\1\220"+
    "\120\0\1\221\41\0\1\222\120\0\1\223\15\0\1\224"+
    "\72\0\1\224\7\0\1\216\2\0\26\216\1\0\25\216"+
    "\4\0\1\225\7\0\1\217\2\0\26\217\1\0\25\217"+
    "\34\0\1\226\120\0\1\227\50\0\1\230\120\0\1\231"+
    "\30\0\1\232\26\0\1\233\56\0\1\234\25\0\1\235"+
    "\37\0\1\236\120\0\1\236\46\0\1\237\120\0\1\237"+
    "\46\0\1\240\120\0\1\241\31\0\1\242\121\0\1\243"+
    "\24\0\1\244\72\0\1\245\122\0\1\246\120\0\1\247"+
    "\50\0\1\250\120\0\1\250\23\0\26\251\1\0\25\251"+
    "\17\0\26\252\1\0\25\252\32\0\1\253\120\0\1\253"+
    "\16\0\1\254\72\0\1\255\7\0\1\251\2\0\26\251"+
    "\1\0\25\251\4\0\1\256\7\0\1\252\2\0\26\252"+
    "\1\0\25\252\4\0\1\257\105\0\26\260\1\0\25\260"+
    "\43\0\1\261\25\0\1\262\5\0\1\256\1\263\34\0"+
    "\1\264\25\0\1\265\21\0\26\266\1\0\25\266\4\0"+
    "\1\267\7\0\1\260\1\0\1\270\26\260\1\0\25\260"+
    "\26\0\1\271\121\0\1\272\31\0\1\273\2\0\26\273"+
    "\1\0\25\273\17\0\1\274\121\0\1\275\30\0\1\276"+
    "\7\0\1\266\1\277\1\0\6\266\1\300\1\301\5\266"+
    "\1\302\6\266\1\303\1\266\1\0\6\266\1\304\1\305"+
    "\4\266\1\306\6\266\1\307\1\266\4\0\1\267\11\0"+
    "\1\270\60\0\1\270\7\0\1\310\2\0\26\310\1\0"+
    "\25\310\23\0\1\311\121\0\1\312\26\0\1\313\2\0"+
    "\1\273\2\0\1\273\2\0\26\273\1\0\25\273\31\0"+
    "\1\314\120\0\1\315\17\0\1\276\10\0\1\277\7\0"+
    "\1\316\1\317\5\0\1\320\6\0\1\321\10\0\1\322"+
    "\1\323\4\0\1\324\6\0\1\325\5\0\1\276\7\0"+
    "\1\266\1\277\1\0\6\266\1\300\1\301\5\266\1\302"+
    "\1\266\1\326\4\266\1\303\1\266\1\0\6\266\1\304"+
    "\1\305\4\266\1\306\6\266\1\307\1\266\4\0\1\276"+
    "\7\0\1\266\1\277\1\0\1\327\5\266\1\300\1\301"+
    "\5\266\1\302\6\266\1\303\1\266\1\0\6\266\1\304"+
    "\1\305\4\266\1\306\6\266\1\307\1\266\4\0\1\276"+
    "\7\0\1\266\1\277\1\0\6\266\1\300\1\301\5\266"+
    "\1\302\1\266\1\330\4\266\1\303\1\266\1\0\6\266"+
    "\1\304\1\305\4\266\1\306\6\266\1\307\1\266\4\0"+
    "\1\276\7\0\1\266\1\277\1\0\6\266\1\300\1\331"+
    "\5\266\1\302\6\266\1\303\1\266\1\0\6\266\1\304"+
    "\1\305\4\266\1\306\6\266\1\307\1\266\4\0\1\276"+
    "\7\0\1\266\1\277\1\0\6\266\1\300\1\301\5\266"+
    "\1\302\6\266\1\303\1\266\1\0\6\266\1\304\1\305"+
    "\4\266\1\306\1\266\1\332\4\266\1\307\1\266\4\0"+
    "\1\276\7\0\1\266\1\277\1\0\6\266\1\300\1\301"+
    "\5\266\1\302\6\266\1\303\1\266\1\0\1\333\5\266"+
    "\1\304\1\305\4\266\1\306\6\266\1\307\1\266\4\0"+
    "\1\276\7\0\1\266\1\277\1\0\6\266\1\300\1\301"+
    "\5\266\1\302\6\266\1\303\1\266\1\0\6\266\1\304"+
    "\1\305\4\266\1\306\1\266\1\334\4\266\1\307\1\266"+
    "\4\0\1\276\7\0\1\266\1\277\1\0\6\266\1\300"+
    "\1\301\5\266\1\302\6\266\1\303\1\266\1\0\6\266"+
    "\1\304\1\335\4\266\1\306\6\266\1\307\1\266\4\0"+
    "\1\336\7\0\1\310\2\0\26\310\1\0\25\310\36\0"+
    "\1\337\120\0\1\340\12\0\1\341\1\263\34\0\1\264"+
    "\25\0\1\265\43\0\1\342\120\0\1\343\41\0\1\344"+
    "\53\0\1\345\111\0\1\346\62\0\1\347\130\0\1\350"+
    "\54\0\1\351\110\0\1\352\63\0\1\353\21\0\1\276"+
    "\7\0\1\266\1\277\1\0\6\266\1\300\1\301\5\266"+
    "\1\354\6\266\1\303\1\266\1\0\6\266\1\304\1\305"+
    "\4\266\1\306\6\266\1\307\1\266\4\0\1\276\7\0"+
    "\1\266\1\277\1\0\6\266\1\300\1\301\5\266\1\302"+
    "\5\266\1\355\1\303\1\266\1\0\6\266\1\304\1\305"+
    "\4\266\1\306\6\266\1\307\1\266\4\0\1\276\7\0"+
    "\1\266\1\277\1\0\3\266\1\356\2\266\1\300\1\301"+
    "\5\266\1\302\6\266\1\303\1\266\1\0\6\266\1\304"+
    "\1\305\4\266\1\306\6\266\1\307\1\266\4\0\1\276"+
    "\7\0\1\266\1\277\1\0\1\327\3\266\1\357\1\266"+
    "\1\300\1\301\5\266\1\302\6\266\1\303\1\266\1\0"+
    "\6\266\1\304\1\305\4\266\1\306\6\266\1\307\1\266"+
    "\4\0\1\276\7\0\1\266\1\277\1\0\6\266\1\300"+
    "\1\301\5\266\1\302\6\266\1\303\1\266\1\0\6\266"+
    "\1\304\1\305\4\266\1\360\6\266\1\307\1\266\4\0"+
    "\1\276\7\0\1\266\1\277\1\0\6\266\1\300\1\301"+
    "\5\266\1\302\6\266\1\303\1\266\1\0\6\266\1\304"+
    "\1\305\4\266\1\306\5\266\1\361\1\307\1\266\4\0"+
    "\1\276\7\0\1\266\1\277\1\0\6\266\1\300\1\301"+
    "\5\266\1\302\6\266\1\303\1\266\1\0\3\266\1\362"+
    "\2\266\1\304\1\305\4\266\1\306\6\266\1\307\1\266"+
    "\4\0\1\276\7\0\1\266\1\277\1\0\6\266\1\300"+
    "\1\301\5\266\1\302\6\266\1\303\1\266\1\0\1\333"+
    "\3\266\1\363\1\266\1\304\1\305\4\266\1\306\6\266"+
    "\1\307\1\266\43\0\1\364\25\0\1\365\24\0\1\366"+
    "\121\0\1\366\24\0\1\341\35\0\1\264\25\0\1\265"+
    "\25\0\1\367\121\0\1\370\54\0\1\371\100\0\1\372"+
    "\52\0\1\373\73\0\1\374\131\0\1\375\100\0\1\376"+
    "\53\0\1\377\73\0\1\u0100\24\0\1\276\7\0\1\266"+
    "\1\277\1\0\6\266\1\300\1\301\5\266\1\302\1\266"+
    "\1\330\2\266\1\u0101\1\266\1\303\1\266\1\0\6\266"+
    "\1\304\1\305\4\266\1\306\6\266\1\307\1\266\4\0"+
    "\1\276\7\0\1\266\1\277\1\0\6\266\1\300\1\301"+
    "\1\u0102\4\266\1\302\6\266\1\303\1\266\1\0\6\266"+
    "\1\304\1\305\4\266\1\306\6\266\1\307\1\266\4\0"+
    "\1\276\7\0\1\266\1\277\1\0\4\266\1\u0103\1\266"+
    "\1\300\1\301\5\266\1\302\6\266\1\303\1\266\1\0"+
    "\6\266\1\304\1\305\4\266\1\306\6\266\1\307\1\266"+
    "\4\0\1\276\7\0\1\266\1\277\1\0\6\266\1\300"+
    "\1\301\5\266\1\302\1\266\1\u0104\4\266\1\303\1\266"+
    "\1\0\6\266\1\304\1\305\4\266\1\306\6\266\1\307"+
    "\1\266\4\0\1\276\7\0\1\266\1\277\1\0\6\266"+
    "\1\300\1\301\5\266\1\302\6\266\1\303\1\266\1\0"+
    "\6\266\1\304\1\305\4\266\1\306\1\266\1\334\2\266"+
    "\1\u0105\1\266\1\307\1\266\4\0\1\276\7\0\1\266"+
    "\1\277\1\0\6\266\1\300\1\301\5\266\1\302\6\266"+
    "\1\303\1\266\1\0\6\266\1\304\1\305\1\u0106\3\266"+
    "\1\306\6\266\1\307\1\266\4\0\1\276\7\0\1\266"+
    "\1\277\1\0\6\266\1\300\1\301\5\266\1\302\6\266"+
    "\1\303\1\266\1\0\4\266\1\u0107\1\266\1\304\1\305"+
    "\4\266\1\306\6\266\1\307\1\266\4\0\1\276\7\0"+
    "\1\266\1\277\1\0\6\266\1\300\1\301\5\266\1\302"+
    "\6\266\1\303\1\266\1\0\6\266\1\304\1\305\4\266"+
    "\1\306\1\266\1\u0108\4\266\1\307\1\266\26\0\1\u0109"+
    "\121\0\1\u010a\21\0\1\u010b\125\0\1\u010c\120\0\1\u010c"+
    "\46\0\1\u010d\60\0\1\u010e\66\0\1\u010f\105\0\1\u0110"+
    "\123\0\1\u0111\61\0\1\u0112\66\0\1\u0113\104\0\1\u0114"+
    "\12\0\1\276\7\0\1\266\1\277\1\0\6\266\1\300"+
    "\1\301\5\266\1\302\1\u0115\5\266\1\303\1\266\1\0"+
    "\6\266\1\304\1\305\4\266\1\306\6\266\1\307\1\266"+
    "\4\0\1\276\7\0\1\266\1\277\1\0\6\266\1\300"+
    "\1\301\4\266\1\u0116\1\302\6\266\1\303\1\266\1\0"+
    "\6\266\1\304\1\305\4\266\1\306\6\266\1\307\1\266"+
    "\4\0\1\276\7\0\1\266\1\277\1\0\6\266\1\300"+
    "\1\301\5\266\1\302\1\266\1\u0115\4\266\1\303\1\266"+
    "\1\0\6\266\1\304\1\305\4\266\1\306\6\266\1\307"+
    "\1\266\4\0\1\276\7\0\1\266\1\277\1\0\4\266"+
    "\1\u0117\1\266\1\300\1\301\5\266\1\302\6\266\1\303"+
    "\1\266\1\0\6\266\1\304\1\305\4\266\1\306\6\266"+
    "\1\307\1\266\4\0\1\276\7\0\1\266\1\277\1\0"+
    "\6\266\1\300\1\301\5\266\1\302\6\266\1\303\1\266"+
    "\1\0\6\266\1\304\1\305\4\266\1\306\1\u0118\5\266"+
    "\1\307\1\266\4\0\1\276\7\0\1\266\1\277\1\0"+
    "\6\266\1\300\1\301\5\266\1\302\6\266\1\303\1\266"+
    "\1\0\6\266\1\304\1\305\3\266\1\u0119\1\306\6\266"+
    "\1\307\1\266\4\0\1\276\7\0\1\266\1\277\1\0"+
    "\6\266\1\300\1\301\5\266\1\302\6\266\1\303\1\266"+
    "\1\0\6\266\1\304\1\305\4\266\1\306\1\266\1\u0118"+
    "\4\266\1\307\1\266\4\0\1\276\7\0\1\266\1\277"+
    "\1\0\6\266\1\300\1\301\5\266\1\302\6\266\1\303"+
    "\1\266\1\0\4\266\1\u0117\1\266\1\304\1\305\4\266"+
    "\1\306\6\266\1\307\1\266\23\0\1\u011a\121\0\1\u011b"+
    "\37\0\26\u011c\1\0\25\u011c\4\0\1\u011d\123\0\1\u011e"+
    "\70\0\1\u011f\75\0\1\u011e\57\0\1\u0120\132\0\1\u0121"+
    "\70\0\1\u0122\75\0\1\u0121\60\0\1\u0120\24\0\1\u0123"+
    "\7\0\1\266\1\277\1\0\6\266\1\300\1\301\5\266"+
    "\1\302\6\266\1\303\1\266\1\0\6\266\1\304\1\305"+
    "\4\266\1\306\6\266\1\307\1\266\4\0\1\276\7\0"+
    "\1\266\1\277\1\0\6\266\1\u0124\1\301\5\266\1\302"+
    "\6\266\1\303\1\266\1\0\6\266\1\304\1\305\4\266"+
    "\1\306\6\266\1\307\1\266\4\0\1\u0125\7\0\1\266"+
    "\1\277\1\0\6\266\1\300\1\301\5\266\1\302\6\266"+
    "\1\303\1\266\1\0\6\266\1\304\1\305\4\266\1\306"+
    "\6\266\1\307\1\266\4\0\1\u0126\7\0\1\266\1\277"+
    "\1\0\6\266\1\300\1\301\5\266\1\302\6\266\1\303"+
    "\1\266\1\0\6\266\1\304\1\305\4\266\1\306\6\266"+
    "\1\307\1\266\4\0\1\276\7\0\1\266\1\277\1\0"+
    "\6\266\1\300\1\301\5\266\1\302\6\266\1\303\1\266"+
    "\1\0\6\266\1\u0127\1\305\4\266\1\306\6\266\1\307"+
    "\1\266\36\0\1\u0128\120\0\1\u0129\12\0\1\u012a\7\0"+
    "\1\u011c\1\0\1\u012b\26\u011c\1\0\25\u011c\5\0\1\u012c"+
    "\71\0\1\u012d\113\0\1\u012e\51\0\1\u012f\72\0\1\u0130"+
    "\142\0\1\u012e\22\0\1\276\10\0\1\277\2\0\1\u0131"+
    "\4\0\1\316\1\317\5\0\1\320\6\0\1\321\10\0"+
    "\1\322\1\323\4\0\1\324\6\0\1\325\5\0\1\u0132"+
    "\7\0\1\266\1\277\1\0\6\266\1\300\1\301\5\266"+
    "\1\302\1\266\1\326\4\266\1\303\1\266\1\0\6\266"+
    "\1\304\1\305\4\266\1\306\6\266\1\307\1\266\4\0"+
    "\1\276\10\0\1\277\1\0\6\u0133\1\u0134\1\u0135\5\u0133"+
    "\1\u0136\6\u0133\1\u0137\1\u0133\1\0\6\u0133\1\u0138\1\u0139"+
    "\4\u0133\1\u013a\6\u0133\1\u013b\1\u0133\4\0\1\276\10\0"+
    "\1\277\7\0\1\316\1\317\5\0\1\320\6\0\1\321"+
    "\3\0\1\u013c\4\0\1\322\1\323\4\0\1\324\6\0"+
    "\1\325\5\0\1\u0132\7\0\1\266\1\277\1\0\6\266"+
    "\1\300\1\301\5\266\1\302\6\266\1\303\1\266\1\0"+
    "\6\266\1\304\1\305\4\266\1\306\1\266\1\332\4\266"+
    "\1\307\1\266\23\0\1\u013d\121\0\1\u013d\24\0\1\u012a"+
    "\11\0\1\u012b\60\0\1\u012b\7\0\1\u013e\1\u013f\1\0"+
    "\26\u013e\1\0\25\u013e\14\0\1\u0140\2\0\26\u0140\1\0"+
    "\25\u0140\20\0\1\u0131\56\0\1\u0141\105\0\26\u0133\1\0"+
    "\25\u0133\47\0\1\u013c\67\0\1\u012e\32\0\1\276\7\0"+
    "\1\u0142\1\277\1\0\6\u0142\1\u0143\1\u0144\5\u0142\1\u0145"+
    "\6\u0142\1\u0146\1\u0142\1\0\6\u0142\1\u0147\1\u0148\4\u0142"+
    "\1\u0149\6\u0142\1\u014a\1\u0142\4\0\1\u014b\7\0\1\u0133"+
    "\1\0\1\u014c\26\u0133\1\0\25\u0133\4\0\1\u014b\7\0"+
    "\1\u0133\1\0\1\u014c\17\u0133\1\u014d\6\u0133\1\0\25\u0133"+
    "\4\0\1\u014b\7\0\1\u0133\1\0\1\u014c\1\u014e\25\u0133"+
    "\1\0\25\u0133\4\0\1\u014b\7\0\1\u0133\1\0\1\u014c"+
    "\17\u0133\1\u014f\6\u0133\1\0\25\u0133\4\0\1\u014b\7\0"+
    "\1\u0133\1\0\1\u014c\7\u0133\1\u0150\16\u0133\1\0\25\u0133"+
    "\4\0\1\u014b\7\0\1\u0133\1\0\1\u014c\26\u0133\1\0"+
    "\16\u0133\1\u0151\6\u0133\4\0\1\u014b\7\0\1\u0133\1\0"+
    "\1\u014c\26\u0133\1\0\1\u0152\24\u0133\4\0\1\u014b\7\0"+
    "\1\u0133\1\0\1\u014c\26\u0133\1\0\16\u0133\1\u0153\6\u0133"+
    "\4\0\1\u014b\7\0\1\u0133\1\0\1\u014c\26\u0133\1\0"+
    "\7\u0133\1\u0154\15\u0133\72\0\1\u012e\4\0\1\u0155\102\0"+
    "\1\u013e\1\u013f\1\0\26\u013e\1\0\25\u013e\6\0\1\u0156"+
    "\2\0\1\u0140\2\0\1\u0140\2\0\26\u0140\1\0\25\u0140"+
    "\14\0\1\u0142\2\0\26\u0142\1\0\25\u0142\4\0\1\u0157"+
    "\7\0\1\u0142\1\0\1\u0158\26\u0142\1\0\25\u0142\4\0"+
    "\1\u0157\7\0\1\u0142\1\0\1\u0158\17\u0142\1\u0159\6\u0142"+
    "\1\0\25\u0142\4\0\1\u0157\7\0\1\u0142\1\0\1\u0158"+
    "\1\u015a\25\u0142\1\0\25\u0142\4\0\1\u0157\7\0\1\u0142"+
    "\1\0\1\u0158\17\u0142\1\u015b\6\u0142\1\0\25\u0142\4\0"+
    "\1\u0157\7\0\1\u0142\1\0\1\u0158\7\u0142\1\u015c\16\u0142"+
    "\1\0\25\u0142\4\0\1\u0157\7\0\1\u0142\1\0\1\u0158"+
    "\26\u0142\1\0\16\u0142\1\u015d\6\u0142\4\0\1\u0157\7\0"+
    "\1\u0142\1\0\1\u0158\26\u0142\1\0\1\u015e\24\u0142\4\0"+
    "\1\u0157\7\0\1\u0142\1\0\1\u0158\26\u0142\1\0\16\u0142"+
    "\1\u015f\6\u0142\4\0\1\u0157\7\0\1\u0142\1\0\1\u0158"+
    "\26\u0142\1\0\7\u0142\1\u0160\15\u0142\4\0\1\u014b\11\0"+
    "\1\u014c\60\0\1\u014c\7\0\1\u0161\1\277\1\0\6\u0161"+
    "\1\u0162\1\u0163\5\u0161\1\u0164\6\u0161\1\u0165\1\u0161\1\0"+
    "\6\u0161\1\u0166\1\u0167\4\u0161\1\u0168\6\u0161\1\u0169\1\u0161"+
    "\4\0\1\u014b\7\0\1\u0133\1\0\1\u014c\15\u0133\1\u016a"+
    "\10\u0133\1\0\25\u0133\4\0\1\u014b\7\0\1\u0133\1\0"+
    "\1\u014c\23\u0133\1\u016b\2\u0133\1\0\25\u0133\4\0\1\u014b"+
    "\7\0\1\u0133\1\0\1\u014c\3\u0133\1\u016c\22\u0133\1\0"+
    "\25\u0133\4\0\1\u014b\7\0\1\u0133\1\0\1\u014c\4\u0133"+
    "\1\u016d\21\u0133\1\0\25\u0133\4\0\1\u014b\7\0\1\u0133"+
    "\1\0\1\u014c\26\u0133\1\0\14\u0133\1\u016e\10\u0133\4\0"+
    "\1\u014b\7\0\1\u0133\1\0\1\u014c\26\u0133\1\0\22\u0133"+
    "\1\u016f\2\u0133\4\0\1\u014b\7\0\1\u0133\1\0\1\u014c"+
    "\26\u0133\1\0\3\u0133\1\u0170\21\u0133\4\0\1\u014b\7\0"+
    "\1\u0133\1\0\1\u014c\26\u0133\1\0\4\u0133\1\u0171\20\u0133"+
    "\17\0\26\u0172\1\0\25\u0172\5\0\1\u012c\7\0\1\u0173"+
    "\61\0\1\u0157\11\0\1\u0158\60\0\1\u0158\7\0\1\u0174"+
    "\2\0\26\u0174\1\0\25\u0174\4\0\1\u0157\7\0\1\u0142"+
    "\1\0\1\u0158\15\u0142\1\u0175\10\u0142\1\0\25\u0142\4\0"+
    "\1\u0157\7\0\1\u0142\1\0\1\u0158\23\u0142\1\u0176\2\u0142"+
    "\1\0\25\u0142\4\0\1\u0157\7\0\1\u0142\1\0\1\u0158"+
    "\3\u0142\1\u0177\22\u0142\1\0\25\u0142\4\0\1\u0157\7\0"+
    "\1\u0142\1\0\1\u0158\4\u0142\1\u0178\21\u0142\1\0\25\u0142"+
    "\4\0\1\u0157\7\0\1\u0142\1\0\1\u0158\26\u0142\1\0"+
    "\14\u0142\1\u0179\10\u0142\4\0\1\u0157\7\0\1\u0142\1\0"+
    "\1\u0158\26\u0142\1\0\22\u0142\1\u017a\2\u0142\4\0\1\u0157"+
    "\7\0\1\u0142\1\0\1\u0158\26\u0142\1\0\3\u0142\1\u017b"+
    "\21\u0142\4\0\1\u0157\7\0\1\u0142\1\0\1\u0158\26\u0142"+
    "\1\0\4\u0142\1\u017c\20\u0142\4\0\1\u017d\7\0\1\u0161"+
    "\1\277\1\0\6\u0161\1\u0162\1\u0163\5\u0161\1\u0164\6\u0161"+
    "\1\u0165\1\u0161\1\0\6\u0161\1\u0166\1\u0167\4\u0161\1\u0168"+
    "\6\u0161\1\u0169\1\u0161\4\0\1\u017d\7\0\1\u0161\1\277"+
    "\1\0\6\u0161\1\u0162\1\u0163\5\u0161\1\u0164\1\u0161\1\u017e"+
    "\4\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u0166\1\u0167\4\u0161"+
    "\1\u0168\6\u0161\1\u0169\1\u0161\4\0\1\u017d\7\0\1\u0161"+
    "\1\277\1\0\1\u017f\5\u0161\1\u0162\1\u0163\5\u0161\1\u0164"+
    "\6\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u0166\1\u0167\4\u0161"+
    "\1\u0168\6\u0161\1\u0169\1\u0161\4\0\1\u017d\7\0\1\u0161"+
    "\1\277\1\0\6\u0161\1\u0162\1\u0163\5\u0161\1\u0164\1\u0161"+
    "\1\u0180\4\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u0166\1\u0167"+
    "\4\u0161\1\u0168\6\u0161\1\u0169\1\u0161\4\0\1\u017d\7\0"+
    "\1\u0161\1\277\1\0\6\u0161\1\u0162\1\u0181\5\u0161\1\u0164"+
    "\6\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u0166\1\u0167\4\u0161"+
    "\1\u0168\6\u0161\1\u0169\1\u0161\4\0\1\u017d\7\0\1\u0161"+
    "\1\277\1\0\6\u0161\1\u0162\1\u0163\5\u0161\1\u0164\6\u0161"+
    "\1\u0165\1\u0161\1\0\6\u0161\1\u0166\1\u0167\4\u0161\1\u0168"+
    "\1\u0161\1\u0182\4\u0161\1\u0169\1\u0161\4\0\1\u017d\7\0"+
    "\1\u0161\1\277\1\0\6\u0161\1\u0162\1\u0163\5\u0161\1\u0164"+
    "\6\u0161\1\u0165\1\u0161\1\0\1\u0183\5\u0161\1\u0166\1\u0167"+
    "\4\u0161\1\u0168\6\u0161\1\u0169\1\u0161\4\0\1\u017d\7\0"+
    "\1\u0161\1\277\1\0\6\u0161\1\u0162\1\u0163\5\u0161\1\u0164"+
    "\6\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u0166\1\u0167\4\u0161"+
    "\1\u0168\1\u0161\1\u0184\4\u0161\1\u0169\1\u0161\4\0\1\u017d"+
    "\7\0\1\u0161\1\277\1\0\6\u0161\1\u0162\1\u0163\5\u0161"+
    "\1\u0164\6\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u0166\1\u0185"+
    "\4\u0161\1\u0168\6\u0161\1\u0169\1\u0161\4\0\1\u014b\7\0"+
    "\1\u0133\1\0\1\u014c\22\u0133\1\u0186\3\u0133\1\0\25\u0133"+
    "\4\0\1\u014b\7\0\1\u0133\1\0\1\u014c\10\u0133\1\u0187"+
    "\15\u0133\1\0\25\u0133\4\0\1\u014b\7\0\1\u0133\1\0"+
    "\1\u014c\4\u0133\1\u0188\21\u0133\1\0\25\u0133\4\0\1\u014b"+
    "\7\0\1\u0133\1\0\1\u014c\17\u0133\1\u0189\6\u0133\1\0"+
    "\25\u0133\4\0\1\u014b\7\0\1\u0133\1\0\1\u014c\26\u0133"+
    "\1\0\21\u0133\1\u018a\3\u0133\4\0\1\u014b\7\0\1\u0133"+
    "\1\0\1\u014c\26\u0133\1\0\10\u0133\1\u018b\14\u0133\4\0"+
    "\1\u014b\7\0\1\u0133\1\0\1\u014c\26\u0133\1\0\4\u0133"+
    "\1\u018c\20\u0133\4\0\1\u014b\7\0\1\u0133\1\0\1\u014c"+
    "\26\u0133\1\0\16\u0133\1\u018d\6\u0133\4\0\1\u018e\7\0"+
    "\1\u0172\1\0\1\u018f\26\u0172\1\0\25\u0172\4\0\1\u017d"+
    "\7\0\1\u0174\1\277\1\0\6\u0174\1\u0190\1\u0191\5\u0174"+
    "\1\u0192\10\u0174\1\0\6\u0174\1\u0193\1\u0194\4\u0174\1\u0195"+
    "\10\u0174\4\0\1\u0157\7\0\1\u0142\1\0\1\u0158\22\u0142"+
    "\1\u0196\3\u0142\1\0\25\u0142\4\0\1\u0157\7\0\1\u0142"+
    "\1\0\1\u0158\10\u0142\1\u0197\15\u0142\1\0\25\u0142\4\0"+
    "\1\u0157\7\0\1\u0142\1\0\1\u0158\4\u0142\1\u0198\21\u0142"+
    "\1\0\25\u0142\4\0\1\u0157\7\0\1\u0142\1\0\1\u0158"+
    "\17\u0142\1\u0199\6\u0142\1\0\25\u0142\4\0\1\u0157\7\0"+
    "\1\u0142\1\0\1\u0158\26\u0142\1\0\21\u0142\1\u019a\3\u0142"+
    "\4\0\1\u0157\7\0\1\u0142\1\0\1\u0158\26\u0142\1\0"+
    "\10\u0142\1\u019b\14\u0142\4\0\1\u0157\7\0\1\u0142\1\0"+
    "\1\u0158\26\u0142\1\0\4\u0142\1\u019c\20\u0142\4\0\1\u0157"+
    "\7\0\1\u0142\1\0\1\u0158\26\u0142\1\0\16\u0142\1\u019d"+
    "\6\u0142\4\0\1\u017d\20\0\1\316\1\317\5\0\1\320"+
    "\17\0\1\322\1\323\4\0\1\324\14\0\1\u017d\7\0"+
    "\1\u0161\1\277\1\0\6\u0161\1\u0162\1\u0163\5\u0161\1\u019e"+
    "\6\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u0166\1\u0167\4\u0161"+
    "\1\u0168\6\u0161\1\u0169\1\u0161\4\0\1\u017d\7\0\1\u0161"+
    "\1\277\1\0\6\u0161\1\u0162\1\u0163\5\u0161\1\u0164\5\u0161"+
    "\1\u019f\1\u0165\1\u0161\1\0\6\u0161\1\u0166\1\u0167\4\u0161"+
    "\1\u0168\6\u0161\1\u0169\1\u0161\4\0\1\u017d\7\0\1\u0161"+
    "\1\277\1\0\3\u0161\1\u01a0\2\u0161\1\u0162\1\u0163\5\u0161"+
    "\1\u0164\6\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u0166\1\u0167"+
    "\4\u0161\1\u0168\6\u0161\1\u0169\1\u0161\4\0\1\u017d\7\0"+
    "\1\u0161\1\277\1\0\1\u017f\3\u0161\1\u01a1\1\u0161\1\u0162"+
    "\1\u0163\5\u0161\1\u0164\6\u0161\1\u0165\1\u0161\1\0\6\u0161"+
    "\1\u0166\1\u0167\4\u0161\1\u0168\6\u0161\1\u0169\1\u0161\4\0"+
    "\1\u017d\7\0\1\u0161\1\277\1\0\6\u0161\1\u0162\1\u0163"+
    "\5\u0161\1\u0164\6\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u0166"+
    "\1\u0167\4\u0161\1\u01a2\6\u0161\1\u0169\1\u0161\4\0\1\u017d"+
    "\7\0\1\u0161\1\277\1\0\6\u0161\1\u0162\1\u0163\5\u0161"+
    "\1\u0164\6\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u0166\1\u0167"+
    "\4\u0161\1\u0168\5\u0161\1\u01a3\1\u0169\1\u0161\4\0\1\u017d"+
    "\7\0\1\u0161\1\277\1\0\6\u0161\1\u0162\1\u0163\5\u0161"+
    "\1\u0164\6\u0161\1\u0165\1\u0161\1\0\3\u0161\1\u01a4\2\u0161"+
    "\1\u0166\1\u0167\4\u0161\1\u0168\6\u0161\1\u0169\1\u0161\4\0"+
    "\1\u017d\7\0\1\u0161\1\277\1\0\6\u0161\1\u0162\1\u0163"+
    "\5\u0161\1\u0164\6\u0161\1\u0165\1\u0161\1\0\1\u0183\3\u0161"+
    "\1\u01a5\1\u0161\1\u0166\1\u0167\4\u0161\1\u0168\6\u0161\1\u0169"+
    "\1\u0161\4\0\1\u014b\7\0\1\u0133\1\0\1\u014c\16\u0133"+
    "\1\u01a6\7\u0133\1\0\25\u0133\4\0\1\u014b\7\0\1\u0133"+
    "\1\0\1\u014c\14\u0133\1\u01a7\11\u0133\1\0\25\u0133\4\0"+
    "\1\u014b\7\0\1\u0133\1\0\1\u014c\17\u0133\1\u01a6\6\u0133"+
    "\1\0\25\u0133\4\0\1\u014b\7\0\1\u0133\1\0\1\u014c"+
    "\4\u0133\1\u01a8\21\u0133\1\0\25\u0133\4\0\1\u014b\7\0"+
    "\1\u0133\1\0\1\u014c\26\u0133\1\0\15\u0133\1\u01a9\7\u0133"+
    "\4\0\1\u014b\7\0\1\u0133\1\0\1\u014c\26\u0133\1\0"+
    "\13\u0133\1\u01aa\11\u0133\4\0\1\u014b\7\0\1\u0133\1\0"+
    "\1\u014c\26\u0133\1\0\16\u0133\1\u01a9\6\u0133\4\0\1\u014b"+
    "\7\0\1\u0133\1\0\1\u014c\26\u0133\1\0\4\u0133\1\u01a8"+
    "\20\u0133\4\0\1\u018e\11\0\1\u018f\60\0\1\u018f\7\0"+
    "\1\u01ab\2\0\26\u01ab\1\0\25\u01ab\4\0\1\u017d\7\0"+
    "\1\u0174\1\277\1\0\6\u0174\1\u0190\1\u0191\5\u0174\1\u0192"+
    "\1\u0174\1\u01ac\6\u0174\1\0\6\u0174\1\u0193\1\u0194\4\u0174"+
    "\1\u0195\10\u0174\4\0\1\u017d\7\0\1\u0174\1\277\1\0"+
    "\1\u01ad\5\u0174\1\u0190\1\u0191\5\u0174\1\u0192\10\u0174\1\0"+
    "\6\u0174\1\u0193\1\u0194\4\u0174\1\u0195\10\u0174\4\0\1\u017d"+
    "\7\0\1\u0174\1\277\1\0\6\u0174\1\u0190\1\u0191\5\u0174"+
    "\1\u0192\1\u0174\1\u01ae\6\u0174\1\0\6\u0174\1\u0193\1\u0194"+
    "\4\u0174\1\u0195\10\u0174\4\0\1\u017d\7\0\1\u0174\1\277"+
    "\1\0\6\u0174\1\u0190\1\u0191\5\u0174\1\u0192\10\u0174\1\0"+
    "\6\u0174\1\u0193\1\u0194\4\u0174\1\u0195\1\u0174\1\u01af\6\u0174"+
    "\4\0\1\u017d\7\0\1\u0174\1\277\1\0\6\u0174\1\u0190"+
    "\1\u0191\5\u0174\1\u0192\10\u0174\1\0\1\u01b0\5\u0174\1\u0193"+
    "\1\u0194\4\u0174\1\u0195\10\u0174\4\0\1\u017d\7\0\1\u0174"+
    "\1\277\1\0\6\u0174\1\u0190\1\u0191\5\u0174\1\u0192\10\u0174"+
    "\1\0\6\u0174\1\u0193\1\u0194\4\u0174\1\u0195\1\u0174\1\u01b1"+
    "\6\u0174\4\0\1\u0157\7\0\1\u0142\1\0\1\u0158\16\u0142"+
    "\1\u01b2\7\u0142\1\0\25\u0142\4\0\1\u0157\7\0\1\u0142"+
    "\1\0\1\u0158\14\u0142\1\u01b3\11\u0142\1\0\25\u0142\4\0"+
    "\1\u0157\7\0\1\u0142\1\0\1\u0158\17\u0142\1\u01b2\6\u0142"+
    "\1\0\25\u0142\4\0\1\u0157\7\0\1\u0142\1\0\1\u0158"+
    "\4\u0142\1\u01b4\21\u0142\1\0\25\u0142\4\0\1\u0157\7\0"+
    "\1\u0142\1\0\1\u0158\26\u0142\1\0\15\u0142\1\u01b5\7\u0142"+
    "\4\0\1\u0157\7\0\1\u0142\1\0\1\u0158\26\u0142\1\0"+
    "\13\u0142\1\u01b6\11\u0142\4\0\1\u0157\7\0\1\u0142\1\0"+
    "\1\u0158\26\u0142\1\0\16\u0142\1\u01b5\6\u0142\4\0\1\u0157"+
    "\7\0\1\u0142\1\0\1\u0158\26\u0142\1\0\4\u0142\1\u01b4"+
    "\20\u0142\4\0\1\u017d\7\0\1\u0161\1\277\1\0\6\u0161"+
    "\1\u0162\1\u0163\5\u0161\1\u0164\1\u0161\1\u0180\2\u0161\1\u01b7"+
    "\1\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u0166\1\u0167\4\u0161"+
    "\1\u0168\6\u0161\1\u0169\1\u0161\4\0\1\u017d\7\0\1\u0161"+
    "\1\277\1\0\6\u0161\1\u0162\1\u0163\1\u01b8\4\u0161\1\u0164"+
    "\6\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u0166\1\u0167\4\u0161"+
    "\1\u0168\6\u0161\1\u0169\1\u0161\4\0\1\u017d\7\0\1\u0161"+
    "\1\277\1\0\4\u0161\1\u01b9\1\u0161\1\u0162\1\u0163\5\u0161"+
    "\1\u0164\6\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u0166\1\u0167"+
    "\4\u0161\1\u0168\6\u0161\1\u0169\1\u0161\4\0\1\u017d\7\0"+
    "\1\u0161\1\277\1\0\6\u0161\1\u0162\1\u0163\5\u0161\1\u0164"+
    "\1\u0161\1\u01ba\4\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u0166"+
    "\1\u0167\4\u0161\1\u0168\6\u0161\1\u0169\1\u0161\4\0\1\u017d"+
    "\7\0\1\u0161\1\277\1\0\6\u0161\1\u0162\1\u0163\5\u0161"+
    "\1\u0164\6\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u0166\1\u0167"+
    "\4\u0161\1\u0168\1\u0161\1\u0184\2\u0161\1\u01bb\1\u0161\1\u0169"+
    "\1\u0161\4\0\1\u017d\7\0\1\u0161\1\277\1\0\6\u0161"+
    "\1\u0162\1\u0163\5\u0161\1\u0164\6\u0161\1\u0165\1\u0161\1\0"+
    "\6\u0161\1\u0166\1\u0167\1\u01bc\3\u0161\1\u0168\6\u0161\1\u0169"+
    "\1\u0161\4\0\1\u017d\7\0\1\u0161\1\277\1\0\6\u0161"+
    "\1\u0162\1\u0163\5\u0161\1\u0164\6\u0161\1\u0165\1\u0161\1\0"+
    "\4\u0161\1\u01bd\1\u0161\1\u0166\1\u0167\4\u0161\1\u0168\6\u0161"+
    "\1\u0169\1\u0161\4\0\1\u017d\7\0\1\u0161\1\277\1\0"+
    "\6\u0161\1\u0162\1\u0163\5\u0161\1\u0164\6\u0161\1\u0165\1\u0161"+
    "\1\0\6\u0161\1\u0166\1\u0167\4\u0161\1\u0168\1\u0161\1\u01be"+
    "\4\u0161\1\u0169\1\u0161\4\0\1\u01bf\7\0\1\u0133\1\0"+
    "\1\u014c\26\u0133\1\0\25\u0133\4\0\1\u014b\7\0\1\u0133"+
    "\1\0\1\u014c\6\u0133\1\u01c0\17\u0133\1\0\25\u0133\4\0"+
    "\1\u01c1\7\0\1\u0133\1\0\1\u014c\26\u0133\1\0\25\u0133"+
    "\4\0\1\u01c2\7\0\1\u0133\1\0\1\u014c\26\u0133\1\0"+
    "\25\u0133\4\0\1\u014b\7\0\1\u0133\1\0\1\u014c\26\u0133"+
    "\1\0\6\u0133\1\u01c0\16\u0133\14\0\1\u01ab\1\u01c3\1\0"+
    "\26\u01ab\1\0\25\u01ab\4\0\1\u017d\7\0\1\u0174\1\277"+
    "\1\0\6\u0174\1\u0190\1\u0191\5\u0174\1\u01c4\10\u0174\1\0"+
    "\6\u0174\1\u0193\1\u0194\4\u0174\1\u0195\10\u0174\4\0\1\u017d"+
    "\7\0\1\u0174\1\277\1\0\6\u0174\1\u0190\1\u0191\5\u0174"+
    "\1\u0192\5\u0174\1\u01c5\2\u0174\1\0\6\u0174\1\u0193\1\u0194"+
    "\4\u0174\1\u0195\10\u0174\4\0\1\u017d\7\0\1\u0174\1\277"+
    "\1\0\3\u0174\1\u01c6\2\u0174\1\u0190\1\u0191\5\u0174\1\u0192"+
    "\10\u0174\1\0\6\u0174\1\u0193\1\u0194\4\u0174\1\u0195\10\u0174"+
    "\4\0\1\u017d\7\0\1\u0174\1\277\1\0\6\u0174\1\u0190"+
    "\1\u0191\5\u0174\1\u0192\10\u0174\1\0\6\u0174\1\u0193\1\u0194"+
    "\4\u0174\1\u01c7\10\u0174\4\0\1\u017d\7\0\1\u0174\1\277"+
    "\1\0\6\u0174\1\u0190\1\u0191\5\u0174\1\u0192\10\u0174\1\0"+
    "\6\u0174\1\u0193\1\u0194\4\u0174\1\u0195\5\u0174\1\u01c8\2\u0174"+
    "\4\0\1\u017d\7\0\1\u0174\1\277\1\0\6\u0174\1\u0190"+
    "\1\u0191\5\u0174\1\u0192\10\u0174\1\0\3\u0174\1\u01c9\2\u0174"+
    "\1\u0193\1\u0194\4\u0174\1\u0195\10\u0174\4\0\1\u01ca\7\0"+
    "\1\u0142\1\0\1\u0158\26\u0142\1\0\25\u0142\4\0\1\u0157"+
    "\7\0\1\u0142\1\0\1\u0158\6\u0142\1\u01cb\17\u0142\1\0"+
    "\25\u0142\4\0\1\u01cc\7\0\1\u0142\1\0\1\u0158\26\u0142"+
    "\1\0\25\u0142\4\0\1\u01cd\7\0\1\u0142\1\0\1\u0158"+
    "\26\u0142\1\0\25\u0142\4\0\1\u0157\7\0\1\u0142\1\0"+
    "\1\u0158\26\u0142\1\0\6\u0142\1\u01cb\16\u0142\4\0\1\u017d"+
    "\7\0\1\u0161\1\277\1\0\6\u0161\1\u0162\1\u0163\5\u0161"+
    "\1\u0164\1\u01ce\5\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u0166"+
    "\1\u0167\4\u0161\1\u0168\6\u0161\1\u0169\1\u0161\4\0\1\u017d"+
    "\7\0\1\u0161\1\277\1\0\6\u0161\1\u0162\1\u0163\4\u0161"+
    "\1\u01cf\1\u0164\6\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u0166"+
    "\1\u0167\4\u0161\1\u0168\6\u0161\1\u0169\1\u0161\4\0\1\u017d"+
    "\7\0\1\u0161\1\277\1\0\6\u0161\1\u0162\1\u0163\5\u0161"+
    "\1\u0164\1\u0161\1\u01ce\4\u0161\1\u0165\1\u0161\1\0\6\u0161"+
    "\1\u0166\1\u0167\4\u0161\1\u0168\6\u0161\1\u0169\1\u0161\4\0"+
    "\1\u017d\7\0\1\u0161\1\277\1\0\4\u0161\1\u01d0\1\u0161"+
    "\1\u0162\1\u0163\5\u0161\1\u0164\6\u0161\1\u0165\1\u0161\1\0"+
    "\6\u0161\1\u0166\1\u0167\4\u0161\1\u0168\6\u0161\1\u0169\1\u0161"+
    "\4\0\1\u017d\7\0\1\u0161\1\277\1\0\6\u0161\1\u0162"+
    "\1\u0163\5\u0161\1\u0164\6\u0161\1\u0165\1\u0161\1\0\6\u0161"+
    "\1\u0166\1\u0167\4\u0161\1\u0168\1\u01d1\5\u0161\1\u0169\1\u0161"+
    "\4\0\1\u017d\7\0\1\u0161\1\277\1\0\6\u0161\1\u0162"+
    "\1\u0163\5\u0161\1\u0164\6\u0161\1\u0165\1\u0161\1\0\6\u0161"+
    "\1\u0166\1\u0167\3\u0161\1\u01d2\1\u0168\6\u0161\1\u0169\1\u0161"+
    "\4\0\1\u017d\7\0\1\u0161\1\277\1\0\6\u0161\1\u0162"+
    "\1\u0163\5\u0161\1\u0164\6\u0161\1\u0165\1\u0161\1\0\6\u0161"+
    "\1\u0166\1\u0167\4\u0161\1\u0168\1\u0161\1\u01d1\4\u0161\1\u0169"+
    "\1\u0161\4\0\1\u017d\7\0\1\u0161\1\277\1\0\6\u0161"+
    "\1\u0162\1\u0163\5\u0161\1\u0164\6\u0161\1\u0165\1\u0161\1\0"+
    "\4\u0161\1\u01d0\1\u0161\1\u0166\1\u0167\4\u0161\1\u0168\6\u0161"+
    "\1\u0169\1\u0161\4\0\1\u014b\11\0\1\u014c\1\0\1\u0131"+
    "\56\0\1\u01d3\7\0\1\u0133\1\0\1\u014c\26\u0133\1\0"+
    "\25\u0133\4\0\1\u014b\11\0\1\u014c\26\u0133\1\0\25\u0133"+
    "\4\0\1\u014b\11\0\1\u014c\30\0\1\u013c\27\0\1\u017d"+
    "\7\0\1\u0174\1\277\1\0\6\u0174\1\u0190\1\u0191\5\u0174"+
    "\1\u0192\1\u0174\1\u01ae\2\u0174\1\u01d4\3\u0174\1\0\6\u0174"+
    "\1\u0193\1\u0194\4\u0174\1\u0195\10\u0174\4\0\1\u017d\7\0"+
    "\1\u0174\1\277\1\0\6\u0174\1\u0190\1\u0191\1\u01d5\4\u0174"+
    "\1\u0192\10\u0174\1\0\6\u0174\1\u0193\1\u0194\4\u0174\1\u0195"+
    "\10\u0174\4\0\1\u017d\7\0\1\u0174\1\277\1\0\4\u0174"+
    "\1\u01d6\1\u0174\1\u0190\1\u0191\5\u0174\1\u0192\10\u0174\1\0"+
    "\6\u0174\1\u0193\1\u0194\4\u0174\1\u0195\10\u0174\4\0\1\u017d"+
    "\7\0\1\u0174\1\277\1\0\6\u0174\1\u0190\1\u0191\5\u0174"+
    "\1\u0192\10\u0174\1\0\6\u0174\1\u0193\1\u0194\4\u0174\1\u0195"+
    "\1\u0174\1\u01b1\2\u0174\1\u01d7\3\u0174\4\0\1\u017d\7\0"+
    "\1\u0174\1\277\1\0\6\u0174\1\u0190\1\u0191\5\u0174\1\u0192"+
    "\10\u0174\1\0\6\u0174\1\u0193\1\u0194\1\u01d8\3\u0174\1\u0195"+
    "\10\u0174\4\0\1\u017d\7\0\1\u0174\1\277\1\0\6\u0174"+
    "\1\u0190\1\u0191\5\u0174\1\u0192\10\u0174\1\0\4\u0174\1\u01d9"+
    "\1\u0174\1\u0193\1\u0194\4\u0174\1\u0195\10\u0174\4\0\1\u0157"+
    "\11\0\1\u0158\1\0\1\u0131\56\0\1\u0142\7\0\1\u0142"+
    "\1\0\1\u0158\26\u0142\1\0\25\u0142\4\0\1\u0157\11\0"+
    "\1\u0158\26\u0133\1\0\25\u0133\4\0\1\u0157\11\0\1\u0158"+
    "\30\0\1\u013c\27\0\1\u01da\7\0\1\u0161\1\277\1\0"+
    "\6\u0161\1\u0162\1\u0163\5\u0161\1\u0164\6\u0161\1\u0165\1\u0161"+
    "\1\0\6\u0161\1\u0166\1\u0167\4\u0161\1\u0168\6\u0161\1\u0169"+
    "\1\u0161\4\0\1\u017d\7\0\1\u0161\1\277\1\0\6\u0161"+
    "\1\u01db\1\u0163\5\u0161\1\u0164\6\u0161\1\u0165\1\u0161\1\0"+
    "\6\u0161\1\u0166\1\u0167\4\u0161\1\u0168\6\u0161\1\u0169\1\u0161"+
    "\4\0\1\u01dc\7\0\1\u0161\1\277\1\0\6\u0161\1\u0162"+
    "\1\u0163\5\u0161\1\u0164\6\u0161\1\u0165\1\u0161\1\0\6\u0161"+
    "\1\u0166\1\u0167\4\u0161\1\u0168\6\u0161\1\u0169\1\u0161\4\0"+
    "\1\u01dd\7\0\1\u0161\1\277\1\0\6\u0161\1\u0162\1\u0163"+
    "\5\u0161\1\u0164\6\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u0166"+
    "\1\u0167\4\u0161\1\u0168\6\u0161\1\u0169\1\u0161\4\0\1\u017d"+
    "\7\0\1\u0161\1\277\1\0\6\u0161\1\u0162\1\u0163\5\u0161"+
    "\1\u0164\6\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u01de\1\u0167"+
    "\4\u0161\1\u0168\6\u0161\1\u0169\1\u0161\4\0\1\u014b\7\0"+
    "\1\u0142\1\0\1\u014c\26\u0142\1\0\25\u0142\4\0\1\u017d"+
    "\7\0\1\u0174\1\277\1\0\6\u0174\1\u0190\1\u0191\5\u0174"+
    "\1\u0192\1\u01df\7\u0174\1\0\6\u0174\1\u0193\1\u0194\4\u0174"+
    "\1\u0195\10\u0174\4\0\1\u017d\7\0\1\u0174\1\277\1\0"+
    "\6\u0174\1\u0190\1\u0191\4\u0174\1\u01e0\1\u0192\10\u0174\1\0"+
    "\6\u0174\1\u0193\1\u0194\4\u0174\1\u0195\10\u0174\4\0\1\u017d"+
    "\7\0\1\u0174\1\277\1\0\6\u0174\1\u0190\1\u0191\5\u0174"+
    "\1\u0192\1\u0174\1\u01df\6\u0174\1\0\6\u0174\1\u0193\1\u0194"+
    "\4\u0174\1\u0195\10\u0174\4\0\1\u017d\7\0\1\u0174\1\277"+
    "\1\0\6\u0174\1\u0190\1\u0191\5\u0174\1\u0192\10\u0174\1\0"+
    "\6\u0174\1\u0193\1\u0194\4\u0174\1\u0195\1\u01e1\7\u0174\4\0"+
    "\1\u017d\7\0\1\u0174\1\277\1\0\6\u0174\1\u0190\1\u0191"+
    "\5\u0174\1\u0192\10\u0174\1\0\6\u0174\1\u0193\1\u0194\3\u0174"+
    "\1\u01e2\1\u0195\10\u0174\4\0\1\u017d\7\0\1\u0174\1\277"+
    "\1\0\6\u0174\1\u0190\1\u0191\5\u0174\1\u0192\10\u0174\1\0"+
    "\6\u0174\1\u0193\1\u0194\4\u0174\1\u0195\1\u0174\1\u01e1\6\u0174"+
    "\4\0\1\u017d\13\0\1\u0131\4\0\1\316\1\317\5\0"+
    "\1\320\17\0\1\322\1\323\4\0\1\324\14\0\1\u01e3"+
    "\7\0\1\u0161\1\277\1\0\6\u0161\1\u0162\1\u0163\5\u0161"+
    "\1\u0164\1\u0161\1\u017e\4\u0161\1\u0165\1\u0161\1\0\6\u0161"+
    "\1\u0166\1\u0167\4\u0161\1\u0168\6\u0161\1\u0169\1\u0161\4\0"+
    "\1\u017d\12\0\6\u0133\1\u0134\1\u0135\5\u0133\1\u0136\10\u0133"+
    "\1\0\6\u0133\1\u0138\1\u0139\4\u0133\1\u013a\10\u0133\4\0"+
    "\1\u017d\20\0\1\316\1\317\5\0\1\320\12\0\1\u013c"+
    "\4\0\1\322\1\323\4\0\1\324\14\0\1\u01e3\7\0"+
    "\1\u0161\1\277\1\0\6\u0161\1\u0162\1\u0163\5\u0161\1\u0164"+
    "\6\u0161\1\u0165\1\u0161\1\0\6\u0161\1\u0166\1\u0167\4\u0161"+
    "\1\u0168\1\u0161\1\u0182\4\u0161\1\u0169\1\u0161\4\0\1\u01da"+
    "\7\0\1\u0174\1\277\1\0\6\u0174\1\u0190\1\u0191\5\u0174"+
    "\1\u0192\10\u0174\1\0\6\u0174\1\u0193\1\u0194\4\u0174\1\u0195"+
    "\10\u0174\4\0\1\u017d\7\0\1\u0174\1\277\1\0\6\u0174"+
    "\1\u01e4\1\u0191\5\u0174\1\u0192\10\u0174\1\0\6\u0174\1\u0193"+
    "\1\u0194\4\u0174\1\u0195\10\u0174\4\0\1\u01dd\7\0\1\u0174"+
    "\1\277\1\0\6\u0174\1\u0190\1\u0191\5\u0174\1\u0192\10\u0174"+
    "\1\0\6\u0174\1\u0193\1\u0194\4\u0174\1\u0195\10\u0174\4\0"+
    "\1\u017d\7\0\1\u0174\1\277\1\0\6\u0174\1\u0190\1\u0191"+
    "\5\u0174\1\u0192\10\u0174\1\0\6\u0174\1\u01e5\1\u0194\4\u0174"+
    "\1\u0195\10\u0174\4\0\1\u017d\7\0\1\u0142\2\0\6\u0142"+
    "\1\u0143\1\u0144\5\u0142\1\u0145\10\u0142\1\0\6\u0142\1\u0147"+
    "\1\u0148\4\u0142\1\u0149\10\u0142\4\0\1\u01e3\7\0\1\u0174"+
    "\1\277\1\0\6\u0174\1\u0190\1\u0191\5\u0174\1\u0192\1\u0174"+
    "\1\u01ac\6\u0174\1\0\6\u0174\1\u0193\1\u0194\4\u0174\1\u0195"+
    "\10\u0174\4\0\1\u01e3\7\0\1\u0174\1\277\1\0\6\u0174"+
    "\1\u0190\1\u0191\5\u0174\1\u0192\10\u0174\1\0\6\u0174\1\u0193"+
    "\1\u0194\4\u0174\1\u0195\1\u0174\1\u01af\6\u0174";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27553];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\3\11\2\1\2\11\25\1\1\0"+
    "\25\1\1\0\27\1\1\11\46\1\1\0\2\1\1\0"+
    "\3\1\14\0\1\11\2\0\1\11\62\0\1\11\177\0"+
    "\1\11\63\0\1\11\117\0\1\11\42\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
	public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  A_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { lexeme = "Error: en la linea: "+(yyline+1)+" y columna: "+(yycolumn+1);
return ERROR;
            }
            // fall through
          case 27: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 28: break;
          case 3:
            { return Multiplicacion;
            }
            // fall through
          case 29: break;
          case 4:
            { return Suma;
            }
            // fall through
          case 30: break;
          case 5:
            { return Resta;
            }
            // fall through
          case 31: break;
          case 6:
            { return Division;
            }
            // fall through
          case 32: break;
          case 7:
            { lexeme=yytext(); return Numero;
            }
            // fall through
          case 33: break;
          case 8:
            { lexeme=yytext(); return Terminacion;
            }
            // fall through
          case 34: break;
          case 9:
            { return Igual;
            }
            // fall through
          case 35: break;
          case 10:
            { lexeme=yytext(); return Identificador;
            }
            // fall through
          case 36: break;
          case 11:
            { return SET;
            }
            // fall through
          case 37: break;
          case 12:
            { return FROM;
            }
            // fall through
          case 38: break;
          case 13:
            { return INTO;
            }
            // fall through
          case 39: break;
          case 14:
            { return WHERE;
            }
            // fall through
          case 40: break;
          case 15:
            { return DELETE;
            }
            // fall through
          case 41: break;
          case 16:
            { return HAVING;
            }
            // fall through
          case 42: break;
          case 17:
            { return INSERT;
            }
            // fall through
          case 43: break;
          case 18:
            { return SELECT;
            }
            // fall through
          case 44: break;
          case 19:
            { return UPDATE;
            }
            // fall through
          case 45: break;
          case 20:
            { return VALUES;
            }
            // fall through
          case 46: break;
          case 21:
            { return GROUPBY;
            }
            // fall through
          case 47: break;
          case 22:
            { return ORDERBY;
            }
            // fall through
          case 48: break;
          case 23:
            { lexeme=yytext(); return Sentencia_SELECT;
            }
            // fall through
          case 49: break;
          case 24:
            { lexeme=yytext(); return Sentencia_DELETE;
            }
            // fall through
          case 50: break;
          case 25:
            { lexeme=yytext(); return Sentencia_INSERT;
            }
            // fall through
          case 51: break;
          case 26:
            { lexeme=yytext(); return Sentencia_UPDATE;
            }
            // fall through
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
